# put password-like values in /etc/cloudrc.private
touch /etc/cloudrc.private
chmod 600 /etc/cloudrc.private
cat <<'EOL' > /etc/cloudrc.private
<% user_data.server.parameters.collect{ |p| p if p.is_protected? }.compact.each do |p| -%>
export <%= p.name %>='<%= p.value.delete("\n").delete("\C-M").sub("'","\'") %>'
<% end -%>
EOL

# put public values in /etc/cloudrc
if [ ! -e /etc/cloudrc ]; then
	cat <<'ETC_CLOUDRC' > /etc/cloudrc
# cloudmaster setup
export AWS_HOME="/opt/cloudmaster"
export RUBYLIB="${AWS_HOME}/lib"
export PATH="${PATH}:${AWS_HOME}/tools"
ETC_CLOUDRC

fi

chmod 644 /etc/cloudrc

cat <<'EOL' >> /etc/cloudrc

function INSTANCE_NAME {
    instance_name="$(cat /etc/hosts | grep "${INSTANCE_ID}" | awk '{ print $2 }' | head -n 1)"
    if [ -z "${instance_name}" ]; then
        echo $(hostname | tr -d "\n")
    else
        echo "${instance_name}"
    fi
}

export -f INSTANCE_NAME
export ACCOUNT_ID="<%= user_data.server.cluster.provider_account.id -%>"
export CLUSTER_ID="<%= user_data.server.cluster.id -%>"
export SERVER_ID="<%= user_data.server.id -%>"
export INSTANCE_ID="$(/usr/local/bin/ec2-metadata -i | awk '{ print $2 }')"

export CLUSTER_NAME="<%= user_data.server.cluster.name.gsub(/[^\w\d]+/, '_').downcase -%>"
export SERVER_NAME="<%= user_data.server.name.gsub(/[^\w\d]+/, '_').downcase -%>"

PS1="\n-[\u@$(INSTANCE_NAME)]- -[\d - \A]-\n-[\w]-\n\$ "
PS2="--- "

# load in password information if user has read access
if [ -r /etc/cloudrc.private ]; then
	source /etc/cloudrc.private
fi

<% user_data.server.parameters.collect{ |p| p unless p.is_protected? }.compact.each do |p| -%>
export <%= p.name %>='<%= p.value.delete("\n").delete("\C-M").sub("'","\'") %>'
<% end -%>
EOL
